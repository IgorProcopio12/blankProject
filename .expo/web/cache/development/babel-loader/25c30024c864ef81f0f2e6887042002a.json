{"ast":null,"code":"function murmurhash2_32_gc(str, seed) {\n  var l = str.length,\n      h = seed ^ l,\n      i = 0,\n      k;\n\n  while (l >= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    k ^= k >>> 24;\n    k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n    h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;\n    l -= 4;\n    ++i;\n  }\n\n  switch (l) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  }\n\n  h ^= h >>> 13;\n  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);\n  h ^= h >>> 15;\n  return h >>> 0;\n}\n\nvar hash = function hash(str) {\n  return murmurhash2_32_gc(str, 1).toString(36);\n};\n\nexport default hash;","map":{"version":3,"sources":["C:/git/blankProject/node_modules/react-native-web/src/vendor/hash/index.js"],"names":["murmurhash2_32_gc","str","seed","l","length","h","i","k","charCodeAt","hash","toString"],"mappings":"AAeA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,IAAhC,EAAsC;AACpC,MAAIC,CAAC,GAAGF,GAAG,CAACG,MAAZ;AAAA,MACEC,CAAC,GAAGH,IAAI,GAAGC,CADb;AAAA,MAEEG,CAAC,GAAG,CAFN;AAAA,MAGEC,CAHF;;AAKA,SAAOJ,CAAC,IAAI,CAAZ,EAAe;AACbI,IAAAA,CAAC,GACEN,GAAG,CAACO,UAAJ,CAAeF,CAAf,IAAoB,IAArB,GACC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,IAAsB,IAAvB,KAAgC,CADjC,GAEC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,IAAsB,IAAvB,KAAgC,EAFjC,GAGC,CAACL,GAAG,CAACO,UAAJ,CAAe,EAAEF,CAAjB,IAAsB,IAAvB,KAAgC,EAJnC;AAMAC,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAJ;AACAA,IAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,IAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAJ;AAEAF,IAAAA,CAAC,GAAI,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAD,GAA6EE,CAAjF;AAEAJ,IAAAA,CAAC,IAAI,CAAL;AACA,MAAEG,CAAF;AACD;;AAED,UAAQH,CAAR;AACE,SAAK,CAAL;AACEE,MAAAA,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJ,CAAeF,CAAC,GAAG,CAAnB,IAAwB,IAAzB,KAAkC,EAAvC;;AACF,SAAK,CAAL;AACED,MAAAA,CAAC,IAAI,CAACJ,GAAG,CAACO,UAAJ,CAAeF,CAAC,GAAG,CAAnB,IAAwB,IAAzB,KAAkC,CAAvC;;AACF,SAAK,CAAL;AACED,MAAAA,CAAC,IAAIJ,GAAG,CAACO,UAAJ,CAAeF,CAAf,IAAoB,IAAzB;AACAD,MAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAJ;AAPJ;;AAUAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,EAAAA,CAAC,GAAG,CAACA,CAAC,GAAG,MAAL,IAAe,UAAf,IAA6B,CAAE,CAACA,CAAC,KAAK,EAAP,IAAa,UAAd,GAA4B,MAA7B,KAAwC,EAArE,CAAJ;AACAA,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AAEA,SAAOA,CAAC,KAAK,CAAb;AACD;;AAED,IAAMI,IAAI,GAAG,SAAPA,IAAO,CAAAR,GAAG;AAAA,SAAID,iBAAiB,CAACC,GAAD,EAAM,CAAN,CAAjB,CAA0BS,QAA1B,CAAmC,EAAnC,CAAJ;AAAA,CAAhB;;AAEA,eAAeD,IAAf","sourcesContent":["/* eslint-disable */\r\n\r\n/**\r\n * JS Implementation of MurmurHash2\r\n *\r\n * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\r\n * @see http://github.com/garycourt/murmurhash-js\r\n * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\r\n * @see http://sites.google.com/site/murmurhash/\r\n *\r\n * @param {string} str ASCII only\r\n * @param {number} seed Positive integer only\r\n * @return {number} 32-bit positive integer hash\r\n */\r\n\r\nfunction murmurhash2_32_gc(str, seed) {\r\n  var l = str.length,\r\n    h = seed ^ l,\r\n    i = 0,\r\n    k;\r\n\r\n  while (l >= 4) {\r\n    k =\r\n      (str.charCodeAt(i) & 0xff) |\r\n      ((str.charCodeAt(++i) & 0xff) << 8) |\r\n      ((str.charCodeAt(++i) & 0xff) << 16) |\r\n      ((str.charCodeAt(++i) & 0xff) << 24);\r\n\r\n    k = (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\r\n    k ^= k >>> 24;\r\n    k = (k & 0xffff) * 0x5bd1e995 + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16);\r\n\r\n    h = ((h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;\r\n\r\n    l -= 4;\r\n    ++i;\r\n  }\r\n\r\n  switch (l) {\r\n    case 3:\r\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\r\n    case 2:\r\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\r\n    case 1:\r\n      h ^= str.charCodeAt(i) & 0xff;\r\n      h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\r\n  }\r\n\r\n  h ^= h >>> 13;\r\n  h = (h & 0xffff) * 0x5bd1e995 + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16);\r\n  h ^= h >>> 15;\r\n\r\n  return h >>> 0;\r\n}\r\n\r\nconst hash = str => murmurhash2_32_gc(str, 1).toString(36);\r\n\r\nexport default hash;\r\n"]},"metadata":{},"sourceType":"module"}