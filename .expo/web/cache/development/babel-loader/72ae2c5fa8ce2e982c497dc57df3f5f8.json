{"ast":null,"code":"import { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from \"./constants\";\nimport normalizeValueWithProperty from \"./normalizeValueWithProperty\";\nvar emptyObject = {};\nvar supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports('text-decoration-line', 'none') || window.CSS.supports('-webkit-text-decoration-line', 'none'));\n\nvar mapTransform = function mapTransform(transform) {\n  var type = Object.keys(transform)[0];\n  var value = normalizeValueWithProperty(transform[type], type);\n  return type + \"(\" + value + \")\";\n};\n\nvar convertTransformMatrix = function convertTransformMatrix(transformMatrix) {\n  var matrix = transformMatrix.join(',');\n  return \"matrix3d(\" + matrix + \")\";\n};\n\nvar resolveTransform = function resolveTransform(resolvedStyle, style) {\n  var transform = style.transform;\n\n  if (Array.isArray(style.transform)) {\n    transform = style.transform.map(mapTransform).join(' ');\n  } else if (style.transformMatrix) {\n    transform = convertTransformMatrix(style.transformMatrix);\n  }\n\n  resolvedStyle.transform = transform;\n};\n\nvar createReactDOMStyle = function createReactDOMStyle(style) {\n  if (!style) {\n    return emptyObject;\n  }\n\n  var resolvedStyle = {};\n  Object.keys(style).sort().forEach(function (prop) {\n    var value = normalizeValueWithProperty(style[prop], prop);\n\n    if (value == null) {\n      return;\n    }\n\n    switch (prop) {\n      case 'aspectRatio':\n      case 'elevation':\n      case 'overlayColor':\n      case 'resizeMode':\n      case 'tintColor':\n        {\n          break;\n        }\n\n      case 'backgroundClip':\n        {\n          if (value === 'text') {\n            resolvedStyle.backgroundClip = value;\n            resolvedStyle.WebkitBackgroundClip = value;\n          }\n\n          break;\n        }\n\n      case 'flex':\n        {\n          if (value > 0) {\n            resolvedStyle.flexGrow = value;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === 0) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 0;\n            resolvedStyle.flexBasis = '0%';\n          } else if (value === -1) {\n            resolvedStyle.flexGrow = 0;\n            resolvedStyle.flexShrink = 1;\n            resolvedStyle.flexBasis = 'auto';\n          }\n\n          break;\n        }\n\n      case 'font':\n        {\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\n          break;\n        }\n\n      case 'fontFamily':\n        {\n          if (value.indexOf('System') > -1) {\n            var stack = value.split(/,\\s*/);\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\n            resolvedStyle[prop] = stack.join(',');\n          } else if (value === 'monospace') {\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\n          } else {\n            resolvedStyle[prop] = value;\n          }\n\n          break;\n        }\n\n      case 'fontVariant':\n        {\n          if (Array.isArray(value) && value.length > 0) {\n            resolvedStyle.fontVariant = value.join(' ');\n          }\n\n          break;\n        }\n\n      case 'textAlignVertical':\n        {\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\n          break;\n        }\n\n      case 'textDecorationLine':\n        {\n          if (!supportsCSS3TextDecoration) {\n            resolvedStyle.textDecoration = value;\n          } else {\n            resolvedStyle.textDecorationLine = value;\n          }\n\n          break;\n        }\n\n      case 'transform':\n      case 'transformMatrix':\n        {\n          resolveTransform(resolvedStyle, style);\n          break;\n        }\n\n      case 'writingDirection':\n        {\n          resolvedStyle.direction = value;\n          break;\n        }\n\n      default:\n        {\n          var longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\n\n          if (longFormProperties) {\n            longFormProperties.forEach(function (longForm, i) {\n              if (typeof style[longForm] === 'undefined') {\n                resolvedStyle[longForm] = value;\n              }\n            });\n          } else {\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\n          }\n        }\n    }\n  });\n  return resolvedStyle;\n};\n\nexport default createReactDOMStyle;","map":{"version":3,"sources":["C:/git/blankProject/node_modules/react-native-web/src/exports/StyleSheet/createReactDOMStyle.js"],"names":["canUseDOM","MONOSPACE_FONT_STACK","SYSTEM_FONT_STACK","STYLE_SHORT_FORM_EXPANSIONS","normalizeValueWithProperty","emptyObject","supportsCSS3TextDecoration","window","CSS","supports","mapTransform","transform","type","Object","keys","value","convertTransformMatrix","transformMatrix","matrix","join","resolveTransform","resolvedStyle","style","Array","isArray","map","createReactDOMStyle","sort","forEach","prop","backgroundClip","WebkitBackgroundClip","flexGrow","flexShrink","flexBasis","replace","indexOf","stack","split","length","fontVariant","verticalAlign","textDecoration","textDecorationLine","direction","longFormProperties","longForm","i"],"mappings":"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","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @noflow\r\n */\r\n\r\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\r\nimport { MONOSPACE_FONT_STACK, SYSTEM_FONT_STACK, STYLE_SHORT_FORM_EXPANSIONS } from './constants';\r\nimport normalizeValueWithProperty from './normalizeValueWithProperty';\r\n\r\n/**\r\n * The browser implements the CSS cascade, where the order of properties is a\r\n * factor in determining which styles to paint. React Native is different. It\r\n * gives giving precedence to the more specific style property. For example,\r\n * the value of `paddingTop` takes precedence over that of `padding`.\r\n *\r\n * This module creates mutally exclusive style declarations by expanding all of\r\n * React Native's supported shortform properties (e.g. `padding`) to their\r\n * longfrom equivalents.\r\n */\r\n\r\nconst emptyObject = {};\r\n\r\nconst supportsCSS3TextDecoration =\r\n  !canUseDOM ||\r\n  (window.CSS != null &&\r\n    window.CSS.supports != null &&\r\n    (window.CSS.supports('text-decoration-line', 'none') ||\r\n      window.CSS.supports('-webkit-text-decoration-line', 'none')));\r\n\r\n/**\r\n * Transform\r\n */\r\n\r\n// { scale: 2 } => 'scale(2)'\r\n// { translateX: 20 } => 'translateX(20px)'\r\nconst mapTransform = transform => {\r\n  const type = Object.keys(transform)[0];\r\n  const value = normalizeValueWithProperty(transform[type], type);\r\n  return `${type}(${value})`;\r\n};\r\n\r\n// [1,2,3,4,5,6] => 'matrix3d(1,2,3,4,5,6)'\r\nconst convertTransformMatrix = transformMatrix => {\r\n  const matrix = transformMatrix.join(',');\r\n  return `matrix3d(${matrix})`;\r\n};\r\n\r\nconst resolveTransform = (resolvedStyle, style) => {\r\n  let transform = style.transform;\r\n  if (Array.isArray(style.transform)) {\r\n    transform = style.transform.map(mapTransform).join(' ');\r\n  } else if (style.transformMatrix) {\r\n    transform = convertTransformMatrix(style.transformMatrix);\r\n  }\r\n  resolvedStyle.transform = transform;\r\n};\r\n\r\n/**\r\n * Reducer\r\n */\r\n\r\nconst createReactDOMStyle = style => {\r\n  if (!style) {\r\n    return emptyObject;\r\n  }\r\n\r\n  const resolvedStyle = {};\r\n\r\n  Object.keys(style)\r\n    .sort()\r\n    .forEach(prop => {\r\n      const value = normalizeValueWithProperty(style[prop], prop);\r\n\r\n      // Ignore everything else with a null value\r\n      if (value == null) {\r\n        return;\r\n      }\r\n\r\n      switch (prop) {\r\n        // Ignore some React Native styles\r\n        case 'aspectRatio':\r\n        case 'elevation':\r\n        case 'overlayColor':\r\n        case 'resizeMode':\r\n        case 'tintColor': {\r\n          break;\r\n        }\r\n\r\n        // TODO: remove once this issue is fixed\r\n        // https://github.com/rofrischmann/inline-style-prefixer/issues/159\r\n        case 'backgroundClip': {\r\n          if (value === 'text') {\r\n            resolvedStyle.backgroundClip = value;\r\n            resolvedStyle.WebkitBackgroundClip = value;\r\n          }\r\n          break;\r\n        }\r\n\r\n        // The 'flex' property value in React Native must be a positive integer,\r\n        // 0, or -1.\r\n        case 'flex': {\r\n          if (value > 0) {\r\n            resolvedStyle.flexGrow = value;\r\n            resolvedStyle.flexShrink = 1;\r\n            resolvedStyle.flexBasis = '0%';\r\n          } else if (value === 0) {\r\n            resolvedStyle.flexGrow = 0;\r\n            resolvedStyle.flexShrink = 0;\r\n            resolvedStyle.flexBasis = '0%';\r\n          } else if (value === -1) {\r\n            resolvedStyle.flexGrow = 0;\r\n            resolvedStyle.flexShrink = 1;\r\n            resolvedStyle.flexBasis = 'auto';\r\n          }\r\n          break;\r\n        }\r\n\r\n        case 'font': {\r\n          resolvedStyle[prop] = value.replace('System', SYSTEM_FONT_STACK);\r\n          break;\r\n        }\r\n\r\n        case 'fontFamily': {\r\n          if (value.indexOf('System') > -1) {\r\n            const stack = value.split(/,\\s*/);\r\n            stack[stack.indexOf('System')] = SYSTEM_FONT_STACK;\r\n            resolvedStyle[prop] = stack.join(',');\r\n          } else if (value === 'monospace') {\r\n            resolvedStyle[prop] = MONOSPACE_FONT_STACK;\r\n          } else {\r\n            resolvedStyle[prop] = value;\r\n          }\r\n          break;\r\n        }\r\n\r\n        case 'fontVariant': {\r\n          if (Array.isArray(value) && value.length > 0) {\r\n            resolvedStyle.fontVariant = value.join(' ');\r\n          }\r\n          break;\r\n        }\r\n\r\n        case 'textAlignVertical': {\r\n          resolvedStyle.verticalAlign = value === 'center' ? 'middle' : value;\r\n          break;\r\n        }\r\n\r\n        case 'textDecorationLine': {\r\n          // use 'text-decoration' for browsers that only support CSS2\r\n          // text-decoration (e.g., IE, Edge)\r\n          if (!supportsCSS3TextDecoration) {\r\n            resolvedStyle.textDecoration = value;\r\n          } else {\r\n            resolvedStyle.textDecorationLine = value;\r\n          }\r\n          break;\r\n        }\r\n\r\n        case 'transform':\r\n        case 'transformMatrix': {\r\n          resolveTransform(resolvedStyle, style);\r\n          break;\r\n        }\r\n\r\n        case 'writingDirection': {\r\n          resolvedStyle.direction = value;\r\n          break;\r\n        }\r\n\r\n        default: {\r\n          const longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];\r\n          if (longFormProperties) {\r\n            longFormProperties.forEach((longForm, i) => {\r\n              // The value of any longform property in the original styles takes\r\n              // precedence over the shortform's value.\r\n              if (typeof style[longForm] === 'undefined') {\r\n                resolvedStyle[longForm] = value;\r\n              }\r\n            });\r\n          } else {\r\n            resolvedStyle[prop] = Array.isArray(value) ? value.join(',') : value;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n  return resolvedStyle;\r\n};\r\n\r\nexport default createReactDOMStyle;\r\n"]},"metadata":{},"sourceType":"module"}