{"ast":null,"code":"import * as React from 'react';\nimport * as ResponderSystem from \"./ResponderSystem\";\nvar emptyObject = {};\nvar idCounter = 0;\n\nfunction useStable(getInitialValue) {\n  var ref = React.useRef(null);\n\n  if (ref.current == null) {\n    ref.current = getInitialValue();\n  }\n\n  return ref.current;\n}\n\nexport default function useResponderEvents(hostRef) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;\n  var id = useStable(function () {\n    return idCounter++;\n  });\n  var isAttachedRef = React.useRef(false);\n  React.useEffect(function () {\n    ResponderSystem.attachListeners();\n    return function () {\n      ResponderSystem.removeNode(id);\n    };\n  }, [id]);\n  React.useEffect(function () {\n    var onMoveShouldSetResponder = config.onMoveShouldSetResponder,\n        onMoveShouldSetResponderCapture = config.onMoveShouldSetResponderCapture,\n        onScrollShouldSetResponder = config.onScrollShouldSetResponder,\n        onScrollShouldSetResponderCapture = config.onScrollShouldSetResponderCapture,\n        onSelectionChangeShouldSetResponder = config.onSelectionChangeShouldSetResponder,\n        onSelectionChangeShouldSetResponderCapture = config.onSelectionChangeShouldSetResponderCapture,\n        onStartShouldSetResponder = config.onStartShouldSetResponder,\n        onStartShouldSetResponderCapture = config.onStartShouldSetResponderCapture;\n    var requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;\n    var node = hostRef.current;\n\n    if (requiresResponderSystem) {\n      ResponderSystem.addNode(id, node, config);\n      isAttachedRef.current = true;\n    } else if (isAttachedRef.current) {\n      ResponderSystem.removeNode(id);\n      isAttachedRef.current = false;\n    }\n  }, [config, hostRef, id]);\n  React.useDebugValue({\n    isResponder: hostRef.current === ResponderSystem.getResponderNode()\n  });\n  React.useDebugValue(config);\n}","map":{"version":3,"sources":["C:/git/blankProject/node_modules/react-native-web/src/hooks/useResponderEvents/index.js"],"names":["React","ResponderSystem","emptyObject","idCounter","useStable","getInitialValue","ref","useRef","current","useResponderEvents","hostRef","config","id","isAttachedRef","useEffect","attachListeners","removeNode","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","requiresResponderSystem","node","addNode","useDebugValue","isResponder","getResponderNode"],"mappings":"AAqBA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,eAAZ;AAEA,IAAMC,WAAW,GAAG,EAApB;AACA,IAAIC,SAAS,GAAG,CAAhB;;AAEA,SAASC,SAAT,CAAsBC,eAAtB,EAAmD;AACjD,MAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAuB,IAAvB,CAAZ;;AACA,MAAID,GAAG,CAACE,OAAJ,IAAe,IAAnB,EAAyB;AACvBF,IAAAA,GAAG,CAACE,OAAJ,GAAcH,eAAe,EAA7B;AACD;;AACD,SAAOC,GAAG,CAACE,OAAX;AACD;;AAED,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAiF;AAAA,MAAvCC,MAAuC,uEAAbT,WAAa;AAC9F,MAAMU,EAAE,GAAGR,SAAS,CAAC;AAAA,WAAMD,SAAS,EAAf;AAAA,GAAD,CAApB;AACA,MAAMU,aAAa,GAAGb,KAAK,CAACO,MAAN,CAAa,KAAb,CAAtB;AAKAP,EAAAA,KAAK,CAACc,SAAN,CAAgB,YAAM;AACpBb,IAAAA,eAAe,CAACc,eAAhB;AACA,WAAO,YAAM;AACXd,MAAAA,eAAe,CAACe,UAAhB,CAA2BJ,EAA3B;AACD,KAFD;AAGD,GALD,EAKG,CAACA,EAAD,CALH;AAQAZ,EAAAA,KAAK,CAACc,SAAN,CAAgB,YAAM;AACpB,QACEG,wBADF,GASIN,MATJ,CACEM,wBADF;AAAA,QAEEC,+BAFF,GASIP,MATJ,CAEEO,+BAFF;AAAA,QAGEC,0BAHF,GASIR,MATJ,CAGEQ,0BAHF;AAAA,QAIEC,iCAJF,GASIT,MATJ,CAIES,iCAJF;AAAA,QAKEC,mCALF,GASIV,MATJ,CAKEU,mCALF;AAAA,QAMEC,0CANF,GASIX,MATJ,CAMEW,0CANF;AAAA,QAOEC,yBAPF,GASIZ,MATJ,CAOEY,yBAPF;AAAA,QAQEC,gCARF,GASIb,MATJ,CAQEa,gCARF;AAWA,QAAMC,uBAAuB,GAC3BR,wBAAwB,IAAI,IAA5B,IACAC,+BAA+B,IAAI,IADnC,IAEAC,0BAA0B,IAAI,IAF9B,IAGAC,iCAAiC,IAAI,IAHrC,IAIAC,mCAAmC,IAAI,IAJvC,IAKAC,0CAA0C,IAAI,IAL9C,IAMAC,yBAAyB,IAAI,IAN7B,IAOAC,gCAAgC,IAAI,IARtC;AAUA,QAAME,IAAI,GAAGhB,OAAO,CAACF,OAArB;;AAEA,QAAIiB,uBAAJ,EAA6B;AAC3BxB,MAAAA,eAAe,CAAC0B,OAAhB,CAAwBf,EAAxB,EAA4Bc,IAA5B,EAAkCf,MAAlC;AACAE,MAAAA,aAAa,CAACL,OAAd,GAAwB,IAAxB;AACD,KAHD,MAGO,IAAIK,aAAa,CAACL,OAAlB,EAA2B;AAChCP,MAAAA,eAAe,CAACe,UAAhB,CAA2BJ,EAA3B;AACAC,MAAAA,aAAa,CAACL,OAAd,GAAwB,KAAxB;AACD;AACF,GA/BD,EA+BG,CAACG,MAAD,EAASD,OAAT,EAAkBE,EAAlB,CA/BH;AAiCAZ,EAAAA,KAAK,CAAC4B,aAAN,CAAoB;AAAEC,IAAAA,WAAW,EAAEnB,OAAO,CAACF,OAAR,KAAoBP,eAAe,CAAC6B,gBAAhB;AAAnC,GAApB;AACA9B,EAAAA,KAAK,CAAC4B,aAAN,CAAoBjB,MAApB;AACD","sourcesContent":["/**\r\n * Copyright (c) Nicolas Gallagher\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n */\r\n\r\n/**\r\n * Hook for integrating the Responder System into React\r\n *\r\n *   function SomeComponent({ onStartShouldSetResponder }) {\r\n *     const ref = useRef(null);\r\n *     useResponderEvents(ref, { onStartShouldSetResponder });\r\n *     return <div ref={ref} />\r\n *   }\r\n */\r\n\r\nimport type { ResponderConfig } from './ResponderSystem';\r\n\r\nimport * as React from 'react';\r\nimport * as ResponderSystem from './ResponderSystem';\r\n\r\nconst emptyObject = {};\r\nlet idCounter = 0;\r\n\r\nfunction useStable<T>(getInitialValue: () => T): T {\r\n  const ref = React.useRef<T | null>(null);\r\n  if (ref.current == null) {\r\n    ref.current = getInitialValue();\r\n  }\r\n  return ref.current;\r\n}\r\n\r\nexport default function useResponderEvents(hostRef: any, config: ResponderConfig = emptyObject) {\r\n  const id = useStable(() => idCounter++);\r\n  const isAttachedRef = React.useRef(false);\r\n\r\n  // This is a separate effects so it doesn't run when the config changes.\r\n  // On initial mount, attach global listeners if needed.\r\n  // On unmount, remove node potentially attached to the Responder System.\r\n  React.useEffect(() => {\r\n    ResponderSystem.attachListeners();\r\n    return () => {\r\n      ResponderSystem.removeNode(id);\r\n    };\r\n  }, [id]);\r\n\r\n  // Register and unregister with the Responder System as necessary\r\n  React.useEffect(() => {\r\n    const {\r\n      onMoveShouldSetResponder,\r\n      onMoveShouldSetResponderCapture,\r\n      onScrollShouldSetResponder,\r\n      onScrollShouldSetResponderCapture,\r\n      onSelectionChangeShouldSetResponder,\r\n      onSelectionChangeShouldSetResponderCapture,\r\n      onStartShouldSetResponder,\r\n      onStartShouldSetResponderCapture\r\n    } = config;\r\n\r\n    const requiresResponderSystem =\r\n      onMoveShouldSetResponder != null ||\r\n      onMoveShouldSetResponderCapture != null ||\r\n      onScrollShouldSetResponder != null ||\r\n      onScrollShouldSetResponderCapture != null ||\r\n      onSelectionChangeShouldSetResponder != null ||\r\n      onSelectionChangeShouldSetResponderCapture != null ||\r\n      onStartShouldSetResponder != null ||\r\n      onStartShouldSetResponderCapture != null;\r\n\r\n    const node = hostRef.current;\r\n\r\n    if (requiresResponderSystem) {\r\n      ResponderSystem.addNode(id, node, config);\r\n      isAttachedRef.current = true;\r\n    } else if (isAttachedRef.current) {\r\n      ResponderSystem.removeNode(id);\r\n      isAttachedRef.current = false;\r\n    }\r\n  }, [config, hostRef, id]);\r\n\r\n  React.useDebugValue({ isResponder: hostRef.current === ResponderSystem.getResponderNode() });\r\n  React.useDebugValue(config);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}